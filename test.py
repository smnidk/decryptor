import random
import string
from vigenere import vigenere_decrypt
from text_utils import clean_text
from kasiski import kasiski_examination
from frequency import find_vigenere_key
from itertools import cycle


def generate_random_text(length=100):
    """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –±—É–∫–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞. """
    return ''.join(random.choices(string.ascii_uppercase + " ", k=length))

def vigenere_encrypt(plaintext, key):
    """ –®–∏—Ñ—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —à–∏—Ñ—Ä–æ–º –í–∏–∂–µ–Ω–µ—Ä–∞. """
    alphabet = string.ascii_uppercase
    ciphertext = []
    key_cycle = cycle(key.upper())

    for char in plaintext:
        if char in alphabet:
            key_char = next(key_cycle)
            shift = alphabet.index(key_char)
            new_index = (alphabet.index(char) + shift) % len(alphabet)
            ciphertext.append(alphabet[new_index])
        else:
            ciphertext.append(char)

    return "".join(ciphertext)

def test_vigenere():
    """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç, —à–∏—Ñ—Ä—É–µ—Ç –µ–≥–æ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å. """
    plaintext = generate_random_text(200)
    key = ''.join(random.choices(string.ascii_uppercase, k=random.randint(3, 7)))  # –°–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á –¥–ª–∏–Ω–æ–π 3-7 —Å–∏–º–≤–æ–ª–æ–≤

    ciphertext = vigenere_encrypt(clean_text(plaintext), key)
    print(f"üîë –ò—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á: {key}")
    print(f"üìù –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {ciphertext}")

    # –í–∑–ª–æ–º —à–∏—Ñ—Ä–∞
    key_length = kasiski_examination(ciphertext)
    if not key_length:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏–Ω—É –∫–ª—é—á–∞.")
        return

    guessed_key = find_vigenere_key(ciphertext, key_length)
    print(f"üìù –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∫–ª—é—á: {guessed_key}")

    decrypted_text = vigenere_decrypt(ciphertext, guessed_key)
    print("\nüîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", decrypted_text)

if __name__ == "__main__":
    test_vigenere()
